{
  "name": "agent",
  "version": "0.2.1",
  "description": "client-side request module",
  "author": {
    "name": "Valerio Proietti",
    "email": "@kamicane",
    "url": "http://mad4milk.net"
  },
  "contributors": [
    {
      "name": "Arian Stolwijk",
      "email": "@arian",
      "url": "https://github.com/arian"
    },
    {
      "name": "Djamil Legato",
      "email": "@w00fz",
      "url": "https://github.com/w00fz"
    },
    {
      "name": "Cristian Carlesso",
      "email": "@kentaromiura",
      "url": "http://github.com/kentaromiura"
    },
    {
      "name": "Steffen Persch",
      "email": "@n3on",
      "url": "https://github.com/n3o77"
    },
    {
      "name": "Garrick Cheung",
      "email": "@Garrick",
      "url": "https://github.com/GCheung55"
    }
  ],
  "main": "./index.js",
  "repository": {
    "url": "git+https://github.com/kamicane/agent.git"
  },
  "dependencies": {
    "prime": "~0.4.0",
    "mout": "~0.9.0"
  },
  "devDependencies": {
    "mocha": "1",
    "expect.js": "0",
    "wrapup": "0.9",
    "express": "3"
  },
  "scripts": {
    "test": "./test/server"
  },
  "gitHead": "bc8ccff346f32952e6c219370a4e208437f355e6",
  "readme": "# Agent\n\nAgent is a client-side request module inspired by SuperAgent.\n\n## API\n\n### The request object\n\n```js\nvar agent = require('agent')\nvar request = agent()\n```\n\nAgent can be used by composing methods:\n\n```js\nrequest.method('GET').url('./file').data({x: y}).send(function(error, response) {\n  //...\n})\n```\n\nThese methods also act as getters when no parameter is supplied.\n\nAgent can also be used by passing arguments:\n\n```js\nvar request = agent('GET', './file', {x: y}, function(error, response) {\n //...\n})\n\n// defaults to POST\nvar request = agent('./file', {x: y}, function(error, response) {\n //...\n})\n\n// defaults to POST, no data\nvar request = agent('./file', function(error, response) {\n //...\n})\n```\n\nYou can also mix and match:\n\n```js\nvar request = agent('./file')\n\nrequest.send(function(error, response) {\n  request.data({x: y}).send(function(error, response) {\n\n  })\n})\n\n```\n\nOther methods:\n\n```js\nrequest.header(name, value) // set request header\nrequest.header(name) // get request header\nrequest.header() // get all request header\n\nrequest.running() // bool\nrequest.abort() // duh\nrequest.user(userName)\nrequest.password(\"password\") // don't use \"password\" as your password\n```\n\n### Encoders, decoders\n\nAgent encodes data you send and decodes data it receives based on content-type.\n\nBy default, it encodes and decodes `application/x-www-form-urlencoded` and `application/json` (however an `application/x-www-form-urlencoded` response is not common).\n\nYou can add a new response body decoder by doing:\n\n```js\nagent.decoder('application/javascript', function(text) {\n  return new Function(text); // hemmm\n});\n\nrequest.send(function(error, response) {\n  // response.body is a function if the content-type\n  // of the response is `application/javascript`\n})\n```\n\nOr an encoder for data you send:\n\n```js\n// This is already in Agent, this is an example\nagent.encoder('application/json', JSON.stringify);\n\nrequest.header('content-type', 'application/json')\n// the request will be sent with JSON rather than url encoded.\nrequest.data({a: 1, b: 2}).send(function(...) {\n\n})\n```\n\n### The response object\n\nThe response obejct you get back when requesting contains a few useful properties:\n\n```js\nresponse.text // response text\nresponse.body // parsed response text based on the content-type header field\nresponse.status // response status\nresponse.header // response header, as an object\n\n// and some added sugar, courtesy of SuperAgent\n\nresponse.info\nresponse.ok\nresponse.clientError\nresponse.serverError\nresponse.error\nresponse.accepted\nresponse.noContent\nresponse.badRequest\nresponse.unauthorized\nresponse.notAcceptable\nresponse.notFound\n```\n\n## Test\n\nSimply run\n```\nnpm test\n```\n\nAnd fire up a browser on `http://localhost:9090`\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/kamicane/agent/issues"
  },
  "homepage": "https://github.com/kamicane/agent#readme",
  "_id": "agent@0.2.1",
  "_shasum": "763a35e9de28657e99cdc833370102f76963e9b3",
  "_from": "w00fz/agent#patch-1",
  "_resolved": "git://github.com/w00fz/agent.git#bc8ccff346f32952e6c219370a4e208437f355e6"
}
